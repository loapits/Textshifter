{"version":3,"sources":["style/header.module.scss","style/input.module.scss","style/button.module.scss","public/logo.svg","public/sun.svg","public/moon.svg","public/clipboard.svg","public/clipboard_dark.svg","public/direct-download.svg","public/direct_download_dark.svg","style/footer.module.scss","state/switch-theme-reducer.ts","components/buttons/Buttons.tsx","state/edit-text-reducer.ts","components/buttons/Buttons-Container.tsx","components/input/Input.tsx","components/input/InputContainer.tsx","components/header/Logo.tsx","components/header/Header.tsx","components/header/Header-Container.tsx","theme.ts","global.ts","components/footer/Footer.tsx","App.tsx","App-Container.tsx","serviceWorker.ts","state/logo-reducer.ts","state/store.ts","index.tsx"],"names":["module","exports","initialState","mode","localStorage","getItem","Buttons","props","className","style","buttons","onClick","textUpperCase","textLowerCase","firstTitle","inverseRegister","startAnUpperCase","asSentence","replaceTextRu","replaceTextEng","voidInp","enterText","editedText","replacer","letters","copied","ButtonsContainer","textEdit","text","toUpperCase","upperCase","toLowerCase","lowerCase","slice","i","length","replace","txt","undefined","replaceText","Object","keys","forEach","key","val","this","React","Component","connect","state","edit","trim","themeName","theme","currentTheme","dispatch","action","type","upperCaseCreator","lowerCaseCreator","firstTitleCreator","registerInversionCreator","startAnUpperCaseCreator","asSentenceCreator","replaceTextCreator","Input","copyToClipboard","saveFileText","id","textarea","value","onChange","placeholder","resultInput","readOnly","onCopy","aria-label","name","files","saver","InputContainer","blob","Blob","saveAs","Math","random","toString","substring","event","target","enterTextCreator","Logo","logotext","logo","img","to","src","alt","Header","toggleTheme","header","href","HeaderContainer","lightTheme","body","textArea","button","buttonTxt","themeBtn","moon","downloadBtn","download","clipboard","buttonHover","darkTheme","sun","downloadDark","clipboardDark","GlobalStyles","createGlobalStyle","Footer","footer","App","switchTheme","useState","setTheme","AppContainer","setItem","switchThemeCreator","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","redusers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","basename","process","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e1934185.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__ULAQr\",\"logo\":\"header_logo__3zEjP\",\"img\":\"header_img__2rl-c\",\"txt\":\"header_txt__1oiHV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"input_textarea__1BdEa\",\"resultInput\":\"input_resultInput__2b_LO\",\"files\":\"input_files__2Z4CM\",\"saver\":\"input_saver__3OmGg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"button_buttons__UqL7q\"};","module.exports = __webpack_public_path__ + \"static/media/logo.c140a131.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.02f11d1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/moon.1e712110.svg\";","module.exports = __webpack_public_path__ + \"static/media/clipboard.2c09403c.svg\";","module.exports = __webpack_public_path__ + \"static/media/clipboard_dark.e24c2f90.svg\";","module.exports = __webpack_public_path__ + \"static/media/direct-download.d365cb2a.svg\";","module.exports = __webpack_public_path__ + \"static/media/direct_download_dark.b221dab5.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__Hh2yN\"};","/**\r\n  * Reducer for the manipulations with the switching the theme.\r\n  */\r\n \r\nconst SWITCH_THEME = 'SWITCH_THEME'\r\n\r\nconst initialState = {\r\n  mode: localStorage.getItem('mode') || 'light'\r\n}\r\n\r\nexport const switchThemeReducer = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case SWITCH_THEME: {\r\n      return{\r\n        ...state,\r\n        mode: action.mode\r\n      }\r\n    }\r\n\r\n    default: \r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n  * Action creator what creating action for the switching the theme. \r\n  * \r\n  * Using in Header.tsx\r\n  * \r\n  * @param {string} mode - first argument, which is mode the theme\r\n  * @returns {string} return the new mode of theme\r\n  */\r\n\r\nexport const switchThemeCreator = (mode: string) => ({type: SWITCH_THEME, mode})","import React from 'react'\r\nimport style from '../../style/button.module.scss'\r\n\r\ninterface text {\r\n  textUpperCase: () => void,\r\n  textLowerCase: () => void,\r\n  firstTitle: () => void,\r\n  inverseRegister: () => void,\r\n  startAnUpperCase: () => void,\r\n  asSentence: () => void,\r\n  replaceTextRu: () => void,\r\n  replaceTextEng: () => void\r\n}\r\n\r\nexport const Buttons: React.FC<text> = (props) => (\r\n  <div className={`button ${style.buttons}`}>\r\n    <button onClick={props.textUpperCase}>Upper case</button>\r\n    <button onClick={props.textLowerCase}>Lower case</button>\r\n    <button onClick={props.firstTitle}>First title</button>\r\n    <button onClick={props.inverseRegister}>Register Inversion</button>\r\n    <button onClick={props.startAnUpperCase}>Start an upper case</button>\r\n    <button onClick={props.asSentence}>As in the sentence</button>\r\n    <button onClick={props.replaceTextRu}>Eng → Ru</button>\r\n    <button onClick={props.replaceTextEng}>Ru → Eng</button>\r\n  </div>\r\n)","/**\r\n  * Reducer for the changing register of text, which entered the user.\r\n  */\r\n\r\nimport letters from './letters.json'\r\nconst INPUT_TEXT = 'INPUT_TEXT'\r\nconst UPPER_CASE = 'UPPER_CASE'\r\nconst LOWER_CASE = 'LOWER_CASE'\r\nconst FIRST_TITLE = 'FIRST_TITLE'\r\nconst REGISTER_INVRESION = 'REGISTER_INVRESION'\r\nconst AS_SENTENCE = 'AS_SENTENCE'\r\nconst START_AN_UPPER_CASE = 'START_AN_UPPER_CASE'\r\nconst REPLASE_TEXT = 'REPLASE_TEXT'\r\nconst SET_COPY_CLIPBOARD = 'SET_COPY_CLIPBOARD'\r\n\r\nconst initialState = {\r\n  voidInp: '',\r\n  enterText: '',\r\n  editedText: '',\r\n  replacer: letters.replacer,\r\n  copied: false,\r\n}\r\n\r\nexport const editTextReducer = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case INPUT_TEXT: {\r\n      return {\r\n        ...state,\r\n        enterText: action.enterText\r\n      }\r\n    }\r\n    case UPPER_CASE: {\r\n      return {\r\n        ...state,\r\n        editedText: action.editedText\r\n      }\r\n    }\r\n    case LOWER_CASE: { \r\n      return {\r\n        ...state,\r\n        editedText: action.editedText\r\n      }\r\n    }\r\n    case FIRST_TITLE: {\r\n      return {\r\n        ...state,\r\n        editedText: action.editedText\r\n      }\r\n    }\r\n    case REGISTER_INVRESION: {\r\n      return {\r\n        ...state,\r\n        editedText: action.editedText\r\n      }\r\n    }\r\n    case START_AN_UPPER_CASE: {\r\n      return {\r\n        ...state,\r\n        editedText: action.editedText\r\n      }\r\n    }\r\n    case AS_SENTENCE: {\r\n      return {\r\n        ...state,\r\n        editedText: action.editedText\r\n      }\r\n    }\r\n    case REPLASE_TEXT: {\r\n      return {\r\n        ...state,\r\n        editedText: action.editedText\r\n      }\r\n    }\r\n    case SET_COPY_CLIPBOARD: {\r\n      return {\r\n        ...state,\r\n        copied: true\r\n      }\r\n    }\r\n\r\n    default: \r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n  * Action creator for show entered text in textarea.\r\n  * \r\n  * Using in InputContainer.tsx\r\n  * \r\n  * @param {string} text if any symbol entered, its gets into store\r\n  * @returns {text: string} return showing in textarea words\r\n  */\r\nexport const enterTextCreator = (text: string) => ({\r\n  type: INPUT_TEXT,\r\n  enterText: text\r\n})\r\n\r\n/**\r\n  * Action creator for change case to upper.\r\n  * \r\n  * Using in ButtonsContainer.tsx\r\n  * \r\n  * @param {text: string} text if any symbol entered, its gets into store\r\n  * @returns {editedText: string} return text in upper case\r\n  */\r\nexport const upperCaseCreator = (text: string) => ({\r\n  type: UPPER_CASE,\r\n  editedText: text\r\n})\r\n\r\n/**\r\n  * Action creator for change case to lower.\r\n  * \r\n  * Using in ButtonsContainer.tsx\r\n  * \r\n  * @param {text: string} text if any symbol entered, its gets into store\r\n  * @returns {editedText: string} return text in lower case\r\n  */\r\nexport const lowerCaseCreator = (text: string) => ({\r\n  type: LOWER_CASE,\r\n  editedText: text\r\n})\r\n\r\n/**\r\n  * Action creator for show entered text in textarea.\r\n  * \r\n  * Using in Buttons.tsx\r\n  * \r\n  * @param {string} enteringText if any symbol entered, its gets into store\r\n  * @returns {text} return showing in textarea words\r\n  */\r\nexport const firstTitleCreator = (text: string) => ({\r\n  type: FIRST_TITLE,\r\n  editedText: text\r\n})\r\n\r\n/**\r\n  * Action creator for show entered text in textarea.\r\n  * \r\n  * Using in Buttons.tsx\r\n  * \r\n  * @param {string} enteringText if any symbol entered, its gets into store\r\n  * @returns {text} return showing in textarea words\r\n  */\r\nexport const registerInversionCreator = (text: string) => ({\r\n  type: REGISTER_INVRESION,\r\n  editedText: text\r\n})\r\n\r\n/**\r\n  * Action creator for show entered text in textarea.\r\n  * \r\n  * Using in Buttons.tsx\r\n  * \r\n  * @param {string} enteringText if any symbol entered, its gets into store\r\n  * @returns {text} return showing in textarea words\r\n  */\r\nexport const startAnUpperCaseCreator = (text: string) => ({\r\n  type: START_AN_UPPER_CASE,\r\n  editedText: text\r\n})\r\n\r\n/**\r\n  * Action creator for show entered text in textarea.\r\n  * \r\n  * Using in Buttons.tsx\r\n  * \r\n  * @param {string} enteringText if any symbol entered, its gets into store\r\n  * @returns {text} return showing in textarea words\r\n  */\r\nexport const asSentenceCreator = (text: string) => ({\r\n  type: AS_SENTENCE,\r\n  editedText: text\r\n})\r\n\r\n/**\r\n  * Action creator for show entered text in textarea.\r\n  * \r\n  * Using in Buttons.tsx\r\n  * \r\n  * @param {string} enteringText if any symbol entered, its gets into store\r\n  * @returns {text} return showing in textarea words\r\n  */\r\nexport const replaceTextCreator = (text: string) => ({\r\n  type: REPLASE_TEXT,\r\n  editedText: text\r\n})\r\n\r\n/**\r\n  * Action creator for show entered text in textarea.\r\n  * \r\n  * Using in Buttons.tsx\r\n  * \r\n  * @param {string} enteringText if any symbol entered, its gets into store\r\n  * @returns {text} return showing in textarea words\r\n  */\r\nexport const copyToClipboardCreator = (copied: boolean) => ({\r\n  type: SET_COPY_CLIPBOARD, \r\n  copied: copied\r\n})","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Buttons } from './Buttons'\r\nimport { upperCaseCreator, lowerCaseCreator, firstTitleCreator, registerInversionCreator, startAnUpperCaseCreator, asSentenceCreator, replaceTextCreator } from '../../state/edit-text-reducer'\r\n\r\ninterface text {\r\n  text: string,\r\n  upperCase: Function,\r\n  lowerCase: Function,\r\n  firstTitle: Function,\r\n  inverseRegister: Function,\r\n  startAnUpperCase: Function,\r\n  asSentence: Function,\r\n  replacer: any,\r\n  replaceText: Function,\r\n  themeName: string\r\n}\r\n\r\nclass ButtonsContainer extends React.Component<text> {\r\n  textUpperCase = () => {\r\n    const textEdit = this.props.text\r\n    if (textEdit) {\r\n      const text = textEdit.toUpperCase()\r\n      this.props.upperCase(text)\r\n    }\r\n  }\r\n\r\n  textLowerCase = () => {\r\n    const textEdit = this.props.text\r\n    if (textEdit) {\r\n      const text = textEdit.toLowerCase()\r\n      this.props.lowerCase(text)\r\n    }\r\n  }\r\n\r\n  firstTitle = () => {\r\n    const textEdit = this.props.text\r\n    if (textEdit) {\r\n      const text = textEdit[0].toUpperCase() + textEdit.slice(1) \r\n      this.props.firstTitle(text)\r\n    }\r\n  }\r\n\r\n  inverseRegister = () => {\r\n    const textEdit = this.props.text\r\n    if (textEdit) {\r\n      let text = ''\r\n      for (let i = 0; i < textEdit.length; i++) {\r\n        textEdit[i].toUpperCase() === textEdit[i] \r\n          ? text += textEdit[i].toLowerCase()\r\n          : text += textEdit[i].toUpperCase()\r\n      }     \r\n      this.props.inverseRegister(text)\r\n    }\r\n  }\r\n\r\n  startAnUpperCase = () => {\r\n    const textEdit = this.props.text\r\n    if (textEdit) {\r\n      const text = textEdit.replace(/(^|\\s)\\S/g, txt => txt.toUpperCase())\r\n      this.props.startAnUpperCase(text)\r\n    }\r\n  }\r\n\r\n  asSentence = () => {\r\n    const textEdit = this.props.text\r\n    if (textEdit) {\r\n      const text = textEdit[0].toUpperCase() + (textEdit.replace(/(^|[?!.;]\\s[\\p{Alpha}\\p{M}\\p{Nd}\\p{Pc}\\p{Join_C}])/gu, txt => txt.toUpperCase())).slice(1)\r\n      this.props.asSentence(text)\r\n    }\r\n  }\r\n\r\n  replace = (replacer: any, textEdit: string, replace: string) => {\r\n    for (let i = 0; i < textEdit.length; i++) {                        \r\n      if( replacer[ textEdit[i].toLowerCase() ] !== undefined ) {\r\n        if (textEdit[i] === textEdit[i].toLowerCase()) {\r\n          replace = replacer[ textEdit[i].toLowerCase() ]    \r\n        } else if (textEdit[i] === textEdit[i].toUpperCase()) {\r\n          replace = replacer[ textEdit[i].toLowerCase() ].toUpperCase();\r\n        }\r\n        textEdit = textEdit.replace(textEdit[i], replace)\r\n      }\r\n    }\r\n    return textEdit\r\n  }\r\n\r\n  replaceTextRu = () => {      \r\n    const text = this.replace(this.props.replacer, this.props.text, '')\r\n    this.props.replaceText(text)\r\n  }\r\n\r\n  replaceTextEng = () => {      \r\n    let textEdit = this.props.text\r\n    let replacer = this.props.replacer\r\n    let keys = Object.keys(replacer)\r\n\r\n    keys.forEach((key) => {\r\n      let val = replacer[key]\r\n      return replacer[val] = key\r\n    })\r\n\r\n    const text = this.replace(replacer,textEdit, '')\r\n    this.props.replaceText(text)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Buttons\r\n        textUpperCase={this.textUpperCase}\r\n        textLowerCase={this.textLowerCase}\r\n        firstTitle={this.firstTitle}\r\n        inverseRegister={this.inverseRegister}\r\n        startAnUpperCase={this.startAnUpperCase}\r\n        asSentence={this.asSentence}\r\n        replaceTextEng={this.replaceTextEng}\r\n        replaceTextRu={this.replaceTextRu}\r\n      />\r\n    )\r\n  } \r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  edit: state.edit,\r\n  text: state.edit.enterText.trim(),\r\n  replacer: state.edit.replacer,\r\n  themeName: state.theme.currentTheme,\r\n  buttons: state.edit.buttons\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  upperCase: (text: string) => {\r\n    const action = upperCaseCreator(text)\r\n    dispatch(action)\r\n  },\r\n  lowerCase: (text: string) => {\r\n    const action = lowerCaseCreator(text)\r\n    dispatch(action)\r\n  },\r\n  firstTitle: (text: string) => {\r\n    const action = firstTitleCreator(text)\r\n    dispatch(action)\r\n  },\r\n  inverseRegister: (text: string) => {\r\n    const action = registerInversionCreator(text)\r\n    dispatch(action)\r\n  },\r\n  startAnUpperCase: (text: string) => {\r\n    const action = startAnUpperCaseCreator(text)\r\n    dispatch(action)\r\n  },\r\n  asSentence: (text: string) => {\r\n    const action = asSentenceCreator(text)\r\n    dispatch(action)\r\n  },\r\n  replaceText: (text: string) => {\r\n    const action = replaceTextCreator(text)\r\n    dispatch(action)\r\n  }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ButtonsContainer)","import React from 'react'\r\nimport style from '../../style/input.module.scss'\r\nimport CopyToClipboard from 'react-copy-to-clipboard'\r\n\r\ninterface text {\r\n  edit: any,\r\n  text: string, \r\n  copied: boolean, \r\n  copyToClipboard: any, \r\n  enterText: (e: any) => void, \r\n  saveFileText:  () => void\r\n}\r\n\r\nexport const Input: React.FC<text> = ({edit, text, copied, copyToClipboard, enterText, saveFileText}) => (\r\n  <main id=\"main\" className={style.textarea}>\r\n    <>\r\n      <textarea value={edit.enterText || ''} onChange={enterText} placeholder=\"Enter your text\"></textarea>\r\n    </>\r\n    <div className={style.resultInput}>\r\n      <textarea value={edit.editedText} readOnly placeholder=\"Your result\"></textarea>\r\n      <CopyToClipboard onCopy={copyToClipboard} text={text}>\r\n        <button aria-label=\"Copy to clipboard\"  name=\"Copy to clipboard\" className={`clipboard ${style.files}`}></button>\r\n      </CopyToClipboard>\r\n      <button aria-label=\"Download edited text\" className={`download ${style.saver}`} onClick={saveFileText}></button>\r\n    </div>\r\n  </main>\r\n)\r\n","import React from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport { Input } from \"./Input\"\r\nimport { saveAs } from 'file-saver'\r\nimport { enterTextCreator, copyToClipboardCreator } from \"../../state/edit-text-reducer\"\r\n\r\ninterface text {\r\n  edit: any,\r\n  text: string,\r\n  copied: boolean,\r\n  copyToClipboard: Function,\r\n  enterText: any\r\n}\r\n\r\nclass InputContainer extends React.Component<text> {\r\n  saveFileText = () => {\r\n    const blob = new Blob([this.props.text], {type: \"text/plain;charset=utf-8\"})\r\n    saveAs(blob, Math.random().toString(36).substring(1) + '.txt')\r\n  }\r\n\r\n  enterText = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let text = event.target.value\r\n    this.props.enterText(text)\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <Input \r\n        edit={this.props.edit}\r\n        text={this.props.text}\r\n        copied={this.props.copied}\r\n        copyToClipboard={this.props.copyToClipboard}\r\n        enterText={this.enterText}\r\n        saveFileText={this.saveFileText}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  edit: state.edit,\r\n  text: state.edit.editedText,\r\n  copied: state.edit.copied\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  enterText: (text: string) => {\r\n    let action = enterTextCreator(text)\r\n    dispatch(action)\r\n  },\r\n  copyToClipboard: () => {\r\n    let action = copyToClipboardCreator(true)\r\n    dispatch(action)\r\n  },\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputContainer)","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport style from '../../style/header.module.scss'\r\nimport logo from '../../public/logo.svg'\r\n\r\ninterface text {\r\n  logotext: string\r\n}\r\n\r\nexport const Logo: React.FC<text> = ({logotext}) => (\r\n  <div className={style.logo}>\r\n    <NavLink className={style.img} to=\"./\"><img src={logo} alt=\"logo the app\"/></NavLink>\r\n    <NavLink className={style.txt} to=\"./\"><span>{logotext}</span></NavLink>\r\n  </div>\r\n)","import React from 'react'\r\nimport { Logo } from './Logo'\r\nimport style from '../../style/header.module.scss'\r\n\r\ninterface text {\r\n  toggleTheme: () => string,\r\n  logotext: string\r\n}\r\n\r\nexport const Header: React.FC<text> = ({toggleTheme, logotext}) => (\r\n  <header className={style.header}>\r\n    <a className=\"skip-link\" href=\"#main\">Skip to main</a>\r\n    <Logo logotext={logotext} />\r\n    <button aria-label=\"Switch theme\" className=\"theme\" onClick={toggleTheme}></button>\r\n  </header>\r\n)","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Header } from \"./Header\"\r\n// import { switchRegisterThunkCreator } from \"../../state/logo-reducer\"\r\n\r\ninterface text {\r\n  logotext: string,\r\n  toggleTheme: any\r\n}\r\n\r\nexport class HeaderContainer extends React.Component<text> {\r\n  render() {\r\n    return(\r\n      <Header\r\n        toggleTheme={this.props.toggleTheme} \r\n        logotext={this.props.logotext} \r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  logotext: state.logo.logotext,\r\n  mode: state.theme.mode\r\n})\r\n\r\n// const mapDispatchToProps = (dispatch: any) => ({\r\n//   switchReg: (text: any) => {\r\n//     const action = switchRegisterThunkCreator(text)\r\n//     dispatch(action)\r\n//   }\r\n// })\r\n\r\nexport default connect(mapStateToProps)(HeaderContainer)","import sun from './public/sun.svg'\r\nimport moon from './public/moon.svg'\r\nimport clipboard from './public/clipboard.svg'\r\nimport clipboardDark from './public/clipboard_dark.svg'\r\nimport download from './public/direct-download.svg'\r\nimport downloadDark from './public/direct_download_dark.svg'\r\n\r\nconst white = '#fff'\r\nconst smoke = '#ccc'\r\nconst gray = '#ddd'\r\nconst darkBody = '#363537'\r\nconst darkArea = '#1f2023'\r\nconst black = '#000'\r\nconst purple = '#a0a4d9'\r\nconst hovPurple = '#6c73d4'\r\n\r\nexport const lightTheme = {\r\n  body: white,\r\n  text: black,\r\n  textArea: gray,\r\n  button: gray,\r\n  buttonTxt: black,\r\n  themeBtn: moon,\r\n  downloadBtn: download,\r\n  clipboard: clipboard,\r\n  buttonHover: smoke\r\n}\r\n\r\nexport const darkTheme = {\r\n  body: darkBody,\r\n  text: smoke,\r\n  textArea: darkArea,\r\n  button: purple,\r\n  buttonTxt: black,\r\n  themeBtn: sun,\r\n  downloadBtn: downloadDark,\r\n  clipboard: clipboardDark,\r\n  buttonHover: hovPurple\r\n}","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyles = createGlobalStyle<any>`\r\n  *,\r\n  *::after,\r\n  *::before{\r\n    box-sizing: border-box;\r\n  }\r\n  body{\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\r\n    transition: all 0.25s linear;\r\n  }\r\n  .button button{\r\n    border: none;\r\n    background: ${({ theme }) => theme.button};\r\n    color: ${({ theme }) => theme.buttonTxt};\r\n  }\r\n  .button button:hover{\r\n    background: ${({ theme }) => theme.buttonHover};\r\n  }\r\n  .button button:focus{\r\n    background: ${({ theme }) => theme.buttonHover};\r\n  }\r\n  textarea{\r\n    border: none;\r\n    background: ${({ theme }) => theme.textArea};\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n  textarea::placeholder{\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n  a{\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n  .theme{\r\n    border: none;\r\n    background: url(${({ theme }) => theme.themeBtn});\r\n  }\r\n  .clipboard{\r\n    background: url(${({ theme }) => theme.clipboard}) no-repeat center top/cover;\r\n  }\r\n  .download{\r\n    background: url(${({ theme }) => theme.downloadBtn}) no-repeat center top/cover;\r\n  }\r\n  .skip-link {\r\n    position: absolute;\r\n    top: -40px;\r\n    left: 0;\r\n    background: #000000;\r\n    color: white;\r\n    padding: 8px;\r\n    z-index: 100;\r\n  }\r\n  \r\n  .skip-link:focus {\r\n    top: 0;\r\n  }\r\n`;\r\n","import React from 'react'\r\nimport style from '../../style/footer.module.scss'\r\n\r\nexport const Footer: React.FC = () => (\r\n  <footer className={style.footer}>\r\n    <span>©Textshifter 2020</span>\r\n  </footer>\r\n)","import React, { useState } from 'react'\r\nimport Buttons from './components/buttons/Buttons-Container'\r\nimport Input from './components/input/InputContainer'\r\nimport HeaderContainer from './components/header/Header-Container'\r\nimport { lightTheme, darkTheme } from './theme'\r\nimport { GlobalStyles } from './global'\r\nimport { ThemeProvider } from 'styled-components'\r\nimport './style/index.scss'\r\nimport { Footer } from './components/footer/Footer'\r\n\r\ninterface text {\r\n  mode: string,\r\n  switchTheme: () => void\r\n}\r\n\r\nexport const App: React.FC<text> = ({mode, switchTheme}) => {\r\n  const [theme, setTheme] = useState(mode)\r\n\r\n  const toggleTheme = () => {\r\n    theme === 'light' ? setTheme('dark') : setTheme('light')\r\n    switchTheme()\r\n  }\r\n  \r\n  return (\r\n    <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\r\n      <>\r\n        <GlobalStyles />\r\n          <div className=\"container\">\r\n            <HeaderContainer toggleTheme={toggleTheme}/>\r\n            <Input />\r\n            <Buttons />\r\n          </div>\r\n          <Footer />\r\n        </>\r\n    </ThemeProvider>\r\n  )\r\n}","import React from 'react'\r\nimport './style/index.scss'\r\nimport { switchThemeCreator } from './state/switch-theme-reducer'\r\nimport { connect } from 'react-redux'\r\nimport { App } from './App'\r\n\r\ninterface text {\r\n  theme: string,\r\n  switchTheme: any\r\n}\r\n\r\nclass AppContainer extends React.Component<text> {\r\n  componentDidUpdate() {\r\n    localStorage.setItem('mode', this.props.theme)\r\n  }\r\n\r\n  switchTheme = () => {\r\n    let theme = this.props.theme\r\n    theme === 'light' ? theme = 'dark' : theme = 'light'\r\n    this.props.switchTheme(theme)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <App\r\n        mode={this.props.theme}\r\n        switchTheme={this.switchTheme} \r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  theme: state.theme.mode\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  switchTheme: (mode: any) => {\r\n    dispatch(switchThemeCreator(mode))\r\n  }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppContainer)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\r\n  * Reducer for the manipulations with the switching the register of logo text.\r\n  */\r\n\r\nconst SWITCH_REGISTER = 'SWITCH_REGISTER'\r\n\r\nconst initialState = {\r\n  logotext: 'Textshifter'\r\n}\r\n\r\nexport const logoReducer = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case SWITCH_REGISTER: {\r\n      return {\r\n        ...state,\r\n        logotext: action.logotext\r\n      }\r\n    }\r\n    default: \r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n  * Action creator what creating action for the switching the register. \r\n  * \r\n  * Using in Logo.tsx\r\n  * \r\n  * @param {string} logotext - first argument, which is mode the theme\r\n  * @returns {string} return Text of logo in new register\r\n  */\r\nexport const switchRegisterCreator = (logotext: string) => ({type: SWITCH_REGISTER, logotext})\r\n\r\n// export const switchRegisterThunkCreator = (text: string) => async (dispatch: any) => {\r\n//     dispatch(switchRegisterCreator(text.toUpperCase()))\r\n// }","import thunk from 'redux-thunk';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { editTextReducer } from './edit-text-reducer'\r\nimport { switchThemeReducer } from './switch-theme-reducer'\r\nimport { logoReducer } from './logo-reducer'\r\n\r\nexport const redusers = combineReducers({\r\n  edit: editTextReducer,\r\n  theme: switchThemeReducer,\r\n  logo: logoReducer\r\n})\r\n\r\nexport const store = createStore(redusers, composeWithDevTools(\r\n  applyMiddleware(thunk)\r\n))","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App-Container'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { store } from './state/store'\nimport 'normalize.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.register()\n"],"sourceRoot":""}