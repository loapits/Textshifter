{"version":3,"sources":["style/header.module.scss","style/input.module.scss","style/button.module.scss","public/logo.svg","public/mode_light.svg","public/mode_dark.svg","public/clipboard_light.svg","public/clipboard_dark.svg","public/success_light.svg","public/success_dark.svg","public/direct-download_light.svg","public/direct_download_dark.svg","style/footer.module.scss","state/switch-theme-reducer.ts","components/buttons/Buttons.tsx","state/edit-text-reducer.ts","state/types.ts","components/buttons/Buttons-Container.tsx","components/input/Input.tsx","components/input/InputContainer.tsx","components/header/Logo.tsx","components/header/Header.tsx","components/header/Header-Container.tsx","theme.ts","global_style.ts","components/footer/Footer.tsx","App.tsx","App-Container.tsx","serviceWorker.ts","state/logo-reducer.ts","state/store.ts","index.tsx"],"names":["module","exports","initialState","mode","localStorage","getItem","Buttons","props","className","style","buttons","type","onClick","textUpperCase","aria-label","textLowerCase","firstTitle","inverseRegister","startAnUpperCase","asSentence","replaceText","enterText","editedText","replacer","copied","copyToClipboardCreator","ButtonsContainer","text","toUpperCase","upperCase","toLowerCase","lowerCase","slice","i","length","replace","txt","undefined","Object","keys","forEach","key","this","React","Component","connect","state","edit","trim","dispatch","action","upperCaseCreator","lowerCaseCreator","firstTitleCreator","registerInversionCreator","startAnUpperCaseCreator","asSentenceCreator","replaceTextCreator","Input","copyToClipboard","enteredText","saveFileText","id","textarea","value","onChange","placeholder","resultInput","readOnly","onCopy","name","files","saver","InputContainer","blob","Blob","saveAs","Math","random","toString","substring","event","target","enterTextCreator","setTimeout","Logo","logotext","logo","img","to","src","alt","Header","toggleTheme","header","href","HeaderContainer","theme","lightTheme","body","textArea","button","buttonTxt","themeBtn","moon","downloadBtn","download","clipboard","clipboardSucc","buttonHover","darkTheme","sun","downloadDark","clipboardDark","clipboardSuccDark","GlobalStyles","createGlobalStyle","Footer","footer","App","switchTheme","useState","setTheme","AppContainer","setItem","switchThemeCreator","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","redusers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","basename","process","document","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,IAAM,oBAAoB,IAAM,sB,gBCA9GD,EAAOC,QAAU,CAAC,SAAW,wBAAwB,YAAc,2BAA2B,MAAQ,qBAAqB,MAAQ,uB,6CCAnID,EAAOC,QAAU,CAAC,QAAU,0B,8oBCD5BD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,mD,gBCA3CD,EAAOC,QAAU,IAA0B,kD,oBCC3CD,EAAOC,QAAU,CAAC,OAAS,yB,sKCOrBC,EAAe,CACnBC,KAAMC,aAAaC,QAAQ,SAAW,S,gCCD3BC,EAA6B,SAACC,GAAD,OACxC,yBAAKC,UAAS,iBAAYC,IAAMC,UAC9B,4BAAQC,KAAK,SAASC,QAASL,EAAMM,cAAeC,aAAW,6BAA/D,aACA,4BAAQH,KAAK,SAASC,QAASL,EAAMQ,cAAeD,aAAW,6BAA/D,aACA,4BAAQH,KAAK,SAASC,QAASL,EAAMS,WAAYF,aAAW,6CAA5D,eACA,4BAAQH,KAAK,SAASC,QAASL,EAAMU,gBAAiBH,aAAW,0BAAjE,sBACA,4BAAQH,KAAK,SAASC,QAASL,EAAMW,iBAAkBJ,aAAW,mDAAlE,uBACA,4BAAQH,KAAK,SAASC,QAASL,EAAMY,WAAYL,aAAW,oCAA5D,sBACA,4BAAQH,KAAK,SAASC,QAASL,EAAMa,YAAaN,aAAW,qBAA7D,mBCJEZ,EAAe,CACnBmB,UAAW,GACXC,WAAY,GACZC,S,MAAkBA,SAClBC,QAAQ,GAoNGC,EAAyB,SAACD,GAAD,MAA2C,CAC/Eb,KC7NgC,qBD8NhCa,OAAQA,IEjNGE,EAAb,4MAEEb,cAAgB,WACd,IAAMQ,EAAY,EAAKd,MAAMc,UAC7B,GAAIA,EAAW,CACb,IAAMM,EAAON,EAAUO,cACvB,EAAKrB,MAAMsB,UAAUF,KAN3B,EAWEZ,cAAgB,WACd,IAAMM,EAAY,EAAKd,MAAMc,UAC7B,GAAIA,EAAW,CACb,IAAMM,EAAON,EAAUS,cACvB,EAAKvB,MAAMwB,UAAUJ,KAf3B,EAoBEX,WAAa,WACX,IAAMK,EAAY,EAAKd,MAAMc,UAC7B,GAAIA,EAAW,CACb,IAAMM,EAAON,EAAU,GAAGO,cAAgBP,EAAUW,MAAM,GAC1D,EAAKzB,MAAMS,WAAWW,KAxB5B,EAkCEV,gBAAkB,WAChB,IAAMI,EAAY,EAAKd,MAAMc,UAC7B,GAAIA,EAAW,CAEb,IADA,IAAIM,EAAO,GACFM,EAAI,EAAGA,EAAIZ,EAAUa,OAAQD,IACpCZ,EAAUY,GAAGL,gBAAkBP,EAAUY,GACrCN,GAAQN,EAAUY,GAAGH,cACrBH,GAAQN,EAAUY,GAAGL,cAE3B,EAAKrB,MAAMU,gBAAgBU,KA3CjC,EAoDET,iBAAmB,WACjB,IAAMG,EAAY,EAAKd,MAAMc,UAC7B,GAAIA,EAAW,CACb,IAAMM,EAAON,EAAUc,QAAQ,aAAa,SAAAC,GAAG,OAAIA,EAAIR,iBACvD,EAAKrB,MAAMW,iBAAiBS,KAxDlC,EAiEER,WAAa,WACX,IAAME,EAAY,EAAKd,MAAMc,UAC7B,GAAIA,EAAW,CACb,IAAMM,EAAON,EAAU,GAAGO,cAAiBP,EAAUc,QAAQ,uiSAAwD,SAAAC,GAAG,OAAIA,EAAIR,iBAAgBI,MAAM,GACtJ,EAAKzB,MAAMY,WAAWQ,KArE5B,EAkFYQ,QAAU,SAACZ,EAAmCF,EAAmBc,GACzE,IAAK,IAAIF,EAAI,EAAGA,EAAIZ,EAAUa,OAAQD,SACSI,IAAzCd,EAASF,EAAUY,GAAGH,iBACpBT,EAAUY,KAAOZ,EAAUY,GAAGH,cAChCK,EAAUZ,EAASF,EAAUY,GAAGH,eACvBT,EAAUY,KAAOZ,EAAUY,GAAGL,gBACvCO,EAAUZ,EAASF,EAAUY,GAAGH,eAAeF,eAEjDP,EAAYA,EAAUc,QAAQd,EAAUY,GAAIE,IAGhD,OAAOd,GA7FX,EA6GED,YAAc,WACZ,IAAMC,EAAY,EAAKd,MAAMc,UACvBE,EAAoC,EAAKhB,MAAMgB,SAErDe,OAAOC,KAAKhB,GAAUiB,SAAQ,SAACC,GAC7B,OAAOlB,EAASA,EAASkB,IAAQA,KAGnC,IAAMd,EAAO,EAAKQ,QAAQZ,EAAUF,EAAW,IAC/C,EAAKd,MAAMa,YAAYO,IAtH3B,uDA6HI,OACE,kBAAC,EAAD,CACEd,cAAe6B,KAAK7B,cACpBE,cAAe2B,KAAK3B,cACpBC,WAAY0B,KAAK1B,WACjBC,gBAAiByB,KAAKzB,gBACtBC,iBAAkBwB,KAAKxB,iBACvBC,WAAYuB,KAAKvB,WACjBC,YAAasB,KAAKtB,kBArI1B,GAAsCuB,IAAMC,WA+L7BC,eA3CS,SAACC,GAAD,MAAuB,CAC7CzB,UAAWyB,EAAMC,KAAK1B,UAAU2B,OAChCzB,SAAUuB,EAAMC,KAAKxB,aAUI,SAAC0B,GAAD,MAAuC,CAChEpB,UAAW,SAACF,GACV,IAAMuB,EFrDsB,SAACvB,GAAD,MAAkC,CAChEhB,KClIwB,aDmIxBW,WAAYK,GEmDKwB,CAAiBxB,GAChCsB,EAASC,IAEXnB,UAAW,SAACJ,GACV,IAAMuB,EF3CsB,SAACvB,GAAD,MAAkC,CAChEhB,KC/IwB,aDgJxBW,WAAYK,GEyCKyB,CAAiBzB,GAChCsB,EAASC,IAEXlC,WAAY,SAACW,GACX,IAAMuB,EFjCuB,SAACvB,GAAD,MAAmC,CAClEhB,KC5JyB,cD6JzBW,WAAYK,GE+BK0B,CAAkB1B,GACjCsB,EAASC,IAEXjC,gBAAiB,SAACU,GAChB,IAAMuB,EFvB8B,SAACvB,GAAD,MAA0C,CAChFhB,KCzKgC,qBD0KhCW,WAAYK,GEqBK2B,CAAyB3B,GACxCsB,EAASC,IAEXhC,iBAAkB,SAACS,GACjB,IAAMuB,EFb6B,SAACvB,GAAD,MAAyC,CAC9EhB,KCrLiC,sBDsLjCW,WAAYK,GEWK4B,CAAwB5B,GACvCsB,EAASC,IAEX/B,WAAY,SAACQ,GACX,IAAMuB,EFHuB,SAACvB,GAAD,MAAmC,CAClEhB,KCpMyB,cDqMzBW,WAAYK,GECK6B,CAAkB7B,GACjCsB,EAASC,IAEX9B,YAAa,SAACO,GACZ,IAAMuB,EFOwB,SAACvB,GAAD,MAAoC,CACpEhB,KChN0B,eDiN1BW,WAAYK,GETK8B,CAAmB9B,GAClCsB,EAASC,OAIEL,CAA6CnB,G,kCCpM/CgC,EAA0B,SAAC,GAAD,IAAElC,EAAF,EAAEA,OAAQF,EAAV,EAAUA,WAAYD,EAAtB,EAAsBA,UAAWsC,EAAjC,EAAiCA,gBAAiBC,EAAlD,EAAkDA,YAAaC,EAA/D,EAA+DA,aAA/D,OACrC,0BAAMC,GAAG,OAAOtD,UAAWC,IAAMsD,UAC/B,+BACE,8BAAUC,MAAO3C,GAAa,GAAI4C,SAAUL,EAAaM,YAAY,qBAEvE,yBAAK1D,UAAWC,IAAM0D,aACpB,+BACE,8BAAUH,MAAO1C,EAAY8C,UAAQ,EAACF,YAAY,iBAEpD,kBAAC,IAAD,CAAiBG,OAAQV,EAAiBhC,KAAML,GAC7CE,EACG,4BAAQV,aAAW,oBAAoBwD,KAAK,oBAAoB9D,UAAS,wBAAmBC,IAAM8D,SAClG,4BAAQzD,aAAW,oBAAoBwD,KAAK,oBAAoB9D,UAAS,oBAAeC,IAAM8D,UAGpG,4BAAQzD,aAAW,uBAAuBN,UAAS,mBAAcC,IAAM+D,OAAS5D,QAASiD,O,QCdlFY,EAAb,4MASEZ,aAAe,WACb,IAAMa,EAAO,IAAIC,KAAK,CAAC,EAAKpE,MAAMe,YAAa,CAACX,KAAM,8BACtDiE,iBAAOF,EAAMG,KAAKC,SAASC,SAAS,IAAIC,UAAU,GAAK,SAX3D,EAqBEpB,YAAc,SAACqB,GACb,IAAItD,EAAOsD,EAAMC,OAAOlB,MACxB,EAAKzD,MAAMqD,YAAYjC,IAvB3B,uDA2BI,OACE,kBAAC,EAAD,CACEH,OAAQkB,KAAKnC,MAAMiB,OACnBF,WAAYoB,KAAKnC,MAAMe,WACvBD,UAAWqB,KAAKnC,MAAMc,UACtBsC,gBAAiBjB,KAAKnC,MAAMoD,gBAC5BC,YAAalB,KAAKkB,YAClBC,aAAcnB,KAAKmB,mBAlC3B,GAAoClB,IAAMC,WA8E3BC,eA3BS,SAACC,GAAD,MAAuB,CAC7CzB,UAAWyB,EAAMC,KAAK1B,UACtBC,WAAYwB,EAAMC,KAAKzB,WACvBE,OAAQsB,EAAMC,KAAKvB,WAUM,SAACyB,GAAD,MAAuC,CAChEW,YAAa,SAACjC,GACZ,IAAIuB,EJiCwB,SAACvB,GAAD,MAAkC,CAChEhB,KCrHwB,aDsHxBU,UAAWM,GInCIwD,CAAiBxD,GAC9BsB,EAASC,IAEXS,gBAAiB,WACfV,EAASxB,GAAuB,IAEhC2D,YAAW,WACTnC,EAASxB,GAAuB,MAC/B,SAIQoB,CAA6C4B,G,0CCrF/CY,EAAwB,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACnC,yBAAK9E,UAAWC,IAAM8E,MACpB,kBAAC,IAAD,CAAS/E,UAAWC,IAAM+E,IAAKC,GAAG,MAAK,yBAAKC,IAAKH,IAAMI,IAAI,kBAC3D,kBAAC,IAAD,CAASnF,UAAWC,IAAM2B,IAAKqD,GAAG,MAAK,8BAAOH,MCDrCM,EAA4B,SAAC,GAAD,IAAEN,EAAF,EAAEA,SAAUO,EAAZ,EAAYA,YAAZ,OACvC,4BAAQrF,UAAWC,IAAMqF,QACvB,uBAAGtF,UAAU,YAAYuF,KAAK,SAA9B,gBACA,kBAAC,EAAD,CAAMT,SAAUA,IAChB,4BAAQxE,aAAW,eAAeN,UAAU,QAAQI,QAASiF,MCPpDG,EAAb,uKAKI,OACE,kBAAC,EAAD,CACEH,YAAanD,KAAKnC,MAAMsF,YACxBP,SAAU5C,KAAKnC,MAAM+E,eAR7B,GAAqC3C,IAAMC,WA4B5BC,eALS,SAACC,GAAD,MAAuB,CAC7CwC,SAAUxC,EAAMyC,KAAKD,SACrBnF,KAAM2C,EAAMmD,MAAM9F,QAGL0C,CAAyBmD,G,yICT3BE,GAAa,CACxBC,KAbY,OAcZxE,KATY,OAUZyE,SAbW,OAcXC,OAdW,OAeXC,UAZY,OAaZC,SAAUC,IACVC,YAAaC,IACbC,UAAWA,IACXC,cAAeA,IACfC,YArBY,QA2BDC,GAAY,CACvBX,KA1Be,UA2BfxE,KA7BY,OA8BZyE,SA3Be,UA4BfC,OA1Ba,UA2BbC,UA5BY,OA6BZC,SAAUQ,IACVN,YAAaO,KACbL,UAAWM,IACXL,cAAeM,IACfL,YA/BgB,W,wtCCjBX,IAAMM,GAAeC,aAAH,MAOP,qBAAGnB,MAAkBE,QAC1B,qBAAGF,MAAkBtE,QAQhB,qBAAGsE,MAAkBI,UAC1B,qBAAGJ,MAAkBK,aAGhB,qBAAGL,MAAkBY,eAGrB,qBAAGZ,MAAkBY,eAIrB,qBAAGZ,MAAkBG,YAC1B,qBAAGH,MAAkBtE,QAGrB,qBAAGsE,MAAkBtE,QAIrB,qBAAGsE,MAAkBtE,QAIZ,qBAAGsE,MAAkBM,YAGrB,qBAAGN,MAAkBU,aAGrB,qBAAGV,MAAkBW,iBAGrB,qBAAGX,MAAkBQ,e,oBC/C9BY,GAAmB,kBAC9B,4BAAQ7G,UAAWC,KAAM6G,QACvB,wDCSSC,GAAsB,SAAC,GAAyB,IAAxBpH,EAAuB,EAAvBA,KAAMqH,EAAiB,EAAjBA,YAAiB,EAShCC,mBAAStH,GATuB,mBASnD8F,EATmD,KAS5CyB,EAT4C,KAgB1D,OACE,kBAAC,KAAD,CAAezB,MAAiB,UAAVA,EAAoBC,GAAaY,IACrD,oCACE,kBAACK,GAAD,MACE,yBAAK3G,UAAU,aACb,kBAAC,EAAD,CAAiBqF,YAVP,WACE6B,EAAV,UAAVzB,EAA6B,OAAmB,SAChDuB,OASQ,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,GAAD,SC7BJG,G,4MAcJH,YAAc,WACZ,IAAIrH,EAAO,EAAKI,MAAMJ,KACHA,EAAV,UAATA,EAA0B,OAAgB,QAC1C,EAAKI,MAAMiH,YAAYrH,I,mEAXvBC,aAAawH,QAAQ,OAAQlF,KAAKnC,MAAMJ,Q,+BAexC,OACE,kBAAC,GAAD,CACEA,KAAMuC,KAAKnC,MAAMJ,KACjBqH,YAAa9E,KAAK8E,kB,GAxBC7E,IAAMC,WAsDlBC,gBAjBS,SAACC,GAAD,MAAiB,CACvC3C,KAAM2C,EAAMmD,MAAM9F,SAUO,SAAC8C,GAAD,MAAoB,CAC7CuE,YAAa,SAACrH,GACZ8C,EdlB8B,SAAC9C,GAAD,MAAoC,CAACQ,KGrC3C,eHqC+DR,QckB9E0H,CAAmB1H,QAIjB0C,CAA6C8E,ICxDtDG,GAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,GAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/F,QACfyF,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,+BChG3DpJ,GAAe,CACnBoF,SAAU,eCECiE,GAAWC,2BAAgB,CACtCzG,KfiC6B,WAAmE,IAAlED,EAAiE,uDAAzD5C,EAAcgD,EAA2C,uCAC/F,OAAQA,EAAOvC,MACb,IC/CsB,aDgDpB,OAAO,2BACFmC,GADL,IAEEzB,UAAW6B,EAAO7B,YAGtB,ICpDsB,aD0DtB,ICzDsB,aD+DtB,IC9DuB,cDoEvB,ICnE8B,qBDyE9B,ICvE+B,sBD6E/B,IC9EuB,cDoFvB,IClFwB,eDmFtB,OAAO,2BACFyB,GADL,IAEExB,WAAY4B,EAAO5B,aAGvB,ICvF8B,qBDwF5B,OAAO,2BACFwB,GADL,IAEEtB,OAAQ0B,EAAO1B,SAInB,QACE,OAAOsB,Ie1FXmD,MjBUgC,WAAoE,IAAnEnD,EAAkE,uDAA1D5C,EAAcgD,EAA4C,uCACnG,OAAQA,EAAOvC,MACb,IGhBwB,eHiBtB,kCACKmC,GADL,IAEE3C,KAAM+C,EAAO/C,OAIjB,QACE,OAAO2C,IiBnBXyC,KDSyB,WAAmE,IAAlEzC,EAAiE,uDAAzD5C,GAAcgD,EAA2C,uCAC3F,OAAQA,EAAOvC,MACb,Ibf2B,kBagBzB,OAAO,2BACFmC,GADL,IAEEwC,SAAUpC,EAAOoC,WAGrB,QACE,OAAOxC,MCVA2G,GAAQC,uBAAYH,GAAUI,+BACzCC,2BAAgBC,Q,MCTlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,SAAUC,gBACvB,kBAAC,IAAD,CAAUT,MAAOA,IACf,kBAAC,GAAD,SAINU,SAASC,eAAe,SHKnB,SAAkB9B,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAI8B,IACpBH,eACAlC,OAAOC,SAASlC,MAEJuE,SAAWtC,OAAOC,SAASqC,OAIvC,OAGFtC,OAAOuC,iBAAiB,QAAQ,WAC9B,IAAMlC,EAAK,UAAM6B,eAAN,sBAEPpC,KAgEV,SAAiCO,EAAeC,GAE9CkC,MAAMnC,EAAO,CACXoC,QAAS,CAAE,iBAAkB,YAE5B/B,MAAK,SAAAgC,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvC,UAAUC,cAAcuC,MAAMrC,MAAK,SAAAC,GACjCA,EAAaqC,aAAatC,MAAK,WAC7BV,OAAOC,SAASgD,eAKpB7C,GAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAgC,CAAwB7C,EAAOC,GAI/BC,UAAUC,cAAcuC,MAAMrC,MAAK,WACjCO,QAAQC,IACN,iHAMJd,GAAgBC,EAAOC,OGjC/BE,K","file":"static/js/main.062c02b1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__ULAQr\",\"logo\":\"header_logo__3zEjP\",\"img\":\"header_img__2rl-c\",\"txt\":\"header_txt__1oiHV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"input_textarea__1BdEa\",\"resultInput\":\"input_resultInput__2b_LO\",\"files\":\"input_files__2Z4CM\",\"saver\":\"input_saver__3OmGg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"button_buttons__UqL7q\"};","module.exports = __webpack_public_path__ + \"static/media/logo.c140a131.svg\";","module.exports = __webpack_public_path__ + \"static/media/mode_light.02f11d1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/mode_dark.1e712110.svg\";","module.exports = __webpack_public_path__ + \"static/media/clipboard_light.2c09403c.svg\";","module.exports = __webpack_public_path__ + \"static/media/clipboard_dark.e24c2f90.svg\";","module.exports = __webpack_public_path__ + \"static/media/success_light.c0cbd084.svg\";","module.exports = __webpack_public_path__ + \"static/media/success_dark.0b4cea90.svg\";","module.exports = __webpack_public_path__ + \"static/media/direct-download_light.d365cb2a.svg\";","module.exports = __webpack_public_path__ + \"static/media/direct_download_dark.b221dab5.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__Hh2yN\"};","import { switchThemeType, ActionsTypes } from \"../types/theme_types\"\r\nimport { SWITCH_THEME } from \"./types\"\r\n\r\n/**\r\n * Starting state of the `switchThemeReducer`.\r\n * \r\n * `mode` - the mode of the theme.\r\n */\r\nconst initialState = {\r\n  mode: localStorage.getItem('mode') || 'light' as string\r\n}\r\n\r\n/**\r\n * Returns `themeInitialTypes` which is a type of data in the `switchThemeReducer`.\r\n */\r\nexport type themeInitialTypes = typeof initialState\r\n\r\n/**\r\n * `switchThemeReducer` which if missing type returns the state.\r\n * \r\n * `SWITCH_THEME` - used for switching theme of application.\r\n * \r\n */\r\nexport const switchThemeReducer = (state = initialState, action: ActionsTypes): themeInitialTypes => {\r\n  switch (action.type) {\r\n    case SWITCH_THEME: {\r\n      return{\r\n        ...state,\r\n        mode: action.mode\r\n      }\r\n    }\r\n\r\n    default: \r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n * Action creator for `SWITCH_THEME` type.\r\n * \r\n * @param mode the value which contains the mode of the  theme.\r\n * \r\n * `type` - the type by which the desiring value is found to change.\r\n * \r\n * `mode` - the value which contains the mode of the theme.\r\n */\r\nexport const switchThemeCreator = (mode: string): switchThemeType => ({type: SWITCH_THEME, mode})","import React from 'react'\r\nimport style from '../../style/button.module.scss'\r\nimport { IButton } from '../../interfaces/buttons_interface'\r\n\r\n/**\r\n * @param props take callback and data from container component.\r\n * @returns div with nested button tags which take from `props` a callbacks for changing.\r\n */\r\nexport const Buttons: React.FC<IButton> = (props) => (\r\n  <div className={`button ${style.buttons}`}>\r\n    <button type=\"button\" onClick={props.textUpperCase} aria-label=\"Convert text to uppercase\">Uppercase</button>\r\n    <button type=\"button\" onClick={props.textLowerCase} aria-label=\"Convert text to lowercase\">Lowercase</button>\r\n    <button type=\"button\" onClick={props.firstTitle} aria-label=\"Convert first letter of text to uppercase\">First title</button>\r\n    <button type=\"button\" onClick={props.inverseRegister} aria-label=\"Inverting case of text\">Register Inversion</button>\r\n    <button type=\"button\" onClick={props.startAnUpperCase} aria-label=\"Convert first letter of every word to uppercase\">Start an upper case</button>\r\n    <button type=\"button\" onClick={props.asSentence} aria-label=\"Convert text how in the sentence\">As in the sentence</button>\r\n    <button type=\"button\" onClick={props.replaceText} aria-label=\"If text wrote on \">Eng ⇄ Ru</button>\r\n  </div>\r\n)","import letters from './letters.json'\r\nimport { enterTextType, upperCaseType, lowerCaseType, firstTitleType, registerInversionType, startAnUpperCaseType, asSentenceType, replaceTextType, copyToClipboardType, ActionsTypes } from '../types/edit_types'\r\nimport { INPUT_TEXT, UPPER_CASE, LOWER_CASE, FIRST_TITLE, REGISTER_INVRESION, START_AN_UPPER_CASE, AS_SENTENCE, REPLASE_TEXT, SET_COPY_CLIPBOARD } from './types'\r\n\r\n/**\r\n * Starting state of the `editTextReducer`.\r\n * \r\n * `enterText` - text which was entered.\r\n * `editedText` - text which was edited.\r\n * `replacer` - object that contains values for replacing from letters of one language to letters of another.\r\n * `copied` - boolean value, which becomes true if click on copyToClipboardButton button.\r\n */\r\nconst initialState = {\r\n  enterText: '',\r\n  editedText: '',\r\n  replacer: letters.replacer as object,\r\n  copied: false\r\n}\r\n\r\n/**\r\n * Returns `logoInitialTypes` which is a type of data in the `editTextReducer`.\r\n */\r\nexport type editInitialTypes = typeof initialState\r\n\r\n/**\r\n * `editTextReducer` which if missing type returns the state.\r\n * \r\n * `INPUT_TEXT` - used for tracking entering text.\r\n * \r\n * `UPPER_CASE` - used for converting text to uppercase.\r\n * \r\n * `LOWER_CASE` - used for converting text to lowercase.\r\n * \r\n * `FIRST_TITLE` - used for converting the first letter of the entered text to uppercase.\r\n * \r\n * `REGISTER_INVRESION` -  used for invert register of the entered text.\r\n * \r\n * `START_AN_UPPER_CASE` - used to convert the first letter of every entered word to uppercase.\r\n * \r\n * `AS_SENTENCE` - used to convert the first letter of every sentence to uppercase.\r\n * \r\n * `REPLASE_TEXT` - used for replacing English letters to Russian or Russian letters to English.\r\n * \r\n * `SET_COPY_CLIPBOARD` - used to set `copied` value for implementing copy a text to the clipboard.\r\n */\r\nexport const editTextReducer = (state = initialState, action: ActionsTypes): editInitialTypes => {\r\n  switch (action.type) {\r\n    case INPUT_TEXT: {\r\n      return {\r\n        ...state,\r\n        enterText: action.enterText\r\n      }\r\n    }\r\n    case UPPER_CASE: {\r\n      return {\r\n        ...state,\r\n        editedText: action.editedText\r\n      }\r\n    }\r\n    case LOWER_CASE: { \r\n      return {\r\n        ...state,\r\n        editedText: action.editedText\r\n      }\r\n    }\r\n    case FIRST_TITLE: {\r\n      return {\r\n        ...state,\r\n        editedText: action.editedText\r\n      }\r\n    }\r\n    case REGISTER_INVRESION: {\r\n      return {\r\n        ...state,\r\n        editedText: action.editedText\r\n      }\r\n    }\r\n    case START_AN_UPPER_CASE: {\r\n      return {\r\n        ...state,\r\n        editedText: action.editedText\r\n      }\r\n    }\r\n    case AS_SENTENCE: {\r\n      return {\r\n        ...state,\r\n        editedText: action.editedText\r\n      }\r\n    }\r\n    case REPLASE_TEXT: {\r\n      return {\r\n        ...state,\r\n        editedText: action.editedText\r\n      }\r\n    }\r\n    case SET_COPY_CLIPBOARD: {\r\n      return {\r\n        ...state,\r\n        copied: action.copied\r\n      }\r\n    }\r\n\r\n    default: \r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n * Action creator for `INPUT_TEXT` type.\r\n * \r\n * @param text the value which contains the was entered text.\r\n * \r\n * `type` - the type by which the desiring value is found to change.\r\n * \r\n * `enterText` - a value in which must be tracking entering text.\r\n */\r\nexport const enterTextCreator = (text: string): enterTextType => ({\r\n  type: INPUT_TEXT,\r\n  enterText: text\r\n})\r\n\r\n/**\r\n * Action creator for `UPPER_CASE` type.\r\n * \r\n * @param text the value which contains the must be edited text.\r\n * \r\n * `type` - the type by which the desiring value is found to change.\r\n * \r\n * `editedText` - a value of which must be converted text to uppercase.\r\n */\r\nexport const upperCaseCreator = (text: string): upperCaseType => ({\r\n  type: UPPER_CASE,\r\n  editedText: text\r\n})\r\n\r\n/**\r\n * Action creator for `LOWER_CASE` type.\r\n * \r\n * @param text the value which contains the must be edited text.\r\n * \r\n * `type` - the type by which the desiring value is found to change.\r\n * \r\n * `editedText` - a value which must be converted text to lowercase.\r\n */\r\nexport const lowerCaseCreator = (text: string): lowerCaseType => ({\r\n  type: LOWER_CASE,\r\n  editedText: text\r\n})\r\n\r\n/**\r\n * Action creator for `FIRST_TITLE` type.\r\n * \r\n * @param text the value which contains the must be edited text.\r\n * \r\n * `type` - the type by which the desiring value is found to change.\r\n * \r\n * `editedText` - a value in which it is necessary to convert the first letter of the entered text to uppercase.\r\n */\r\nexport const firstTitleCreator = (text: string): firstTitleType => ({\r\n  type: FIRST_TITLE,\r\n  editedText: text\r\n})\r\n\r\n/**\r\n * Action creator for `REGISTER_INVRESION` type.\r\n * \r\n * @param text the value which contains the must be edited text.\r\n * \r\n * `type` - the type by which the desiring value is found to change.\r\n * \r\n * `editedText` - a value if which must be invert register of the entered text.\r\n */\r\nexport const registerInversionCreator = (text: string): registerInversionType => ({\r\n  type: REGISTER_INVRESION,\r\n  editedText: text\r\n})\r\n\r\n/**\r\n * Action creator for `START_AN_UPPER_CASE` type.\r\n * \r\n * @param text the value which contains the must be edited text.\r\n * \r\n * `type` - the type by which the desiring value is found to change.\r\n * \r\n * `editedText` - a value in which it is necessary to convert the first letter of each entered word to uppercase.\r\n */\r\nexport const startAnUpperCaseCreator = (text: string): startAnUpperCaseType => ({\r\n  type: START_AN_UPPER_CASE,\r\n  editedText: text\r\n})\r\n\r\n/**\r\n * Action creator for `AS_SENTENCE` type.\r\n * \r\n * @param text the value which contains the must be edited text.\r\n * \r\n * `type` - the type by which the desiring value is found to change.\r\n * \r\n * `editedText` - a value which must be changed.\r\n */\r\nexport const asSentenceCreator = (text: string): asSentenceType => ({\r\n  type: AS_SENTENCE,\r\n  editedText: text\r\n})\r\n\r\n/**\r\n * Action creator for `REPLASE_TEXT` type.\r\n * \r\n * @param text the value which contains the must be edited text.\r\n * \r\n * `type` - the type by which the desiring value is found to change.\r\n * \r\n * `editedText` - a value in which the first letter of every sentence must be converted to uppercase.\r\n */\r\nexport const replaceTextCreator = (text: string): replaceTextType => ({\r\n  type: REPLASE_TEXT,\r\n  editedText: text\r\n})\r\n\r\n/**\r\n * Action creator for `SET_COPY_CLIPBOARD` type.\r\n * \r\n* @param copied the value which if the text to was copied set true.\r\n * \r\n * `type` - the type by which the desiring value is found to change.\r\n * \r\n * `copied` - a boolean value, which displays whether the text is copied.\r\n */\r\nexport const copyToClipboardCreator = (copied: boolean): copyToClipboardType => ({\r\n  type: SET_COPY_CLIPBOARD, \r\n  copied: copied\r\n})","export const INPUT_TEXT = 'INPUT_TEXT'\r\nexport const UPPER_CASE = 'UPPER_CASE'\r\nexport const LOWER_CASE = 'LOWER_CASE'\r\nexport const FIRST_TITLE = 'FIRST_TITLE'\r\nexport const REGISTER_INVRESION = 'REGISTER_INVRESION'\r\nexport const AS_SENTENCE = 'AS_SENTENCE'\r\nexport const START_AN_UPPER_CASE = 'START_AN_UPPER_CASE'\r\nexport const REPLASE_TEXT = 'REPLASE_TEXT'\r\nexport const SET_COPY_CLIPBOARD = 'SET_COPY_CLIPBOARD'\r\nexport const SWITCH_THEME = 'SWITCH_THEME'\r\nexport const SWITCH_REGISTER = 'SWITCH_REGISTER'","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Buttons } from './Buttons'\r\nimport { upperCaseCreator, lowerCaseCreator, firstTitleCreator, registerInversionCreator, startAnUpperCaseCreator, asSentenceCreator, replaceTextCreator } from '../../state/edit-text-reducer'\r\nimport { IButtonContainer } from '../../interfaces/buttons_interface'\r\nimport { stateType } from '../../types/state_type'\r\nimport { Dispatch } from 'redux'\r\nimport { ActionsTypes } from '../../types/edit_types'\r\n\r\n/**\r\n * The component that is responsible for the buttons.\r\n * \r\n * @method `textUpperCase()` convertin enterText in uppercase.\r\n * @method `textLowerCase()` convertin enterText in lowercase.\r\n * @method `firstTitle()` convertin first letter of enterText in uppercase.\r\n * @method `inverseRegister()` invert every letter on the reverse case.\r\n * @method `startAnUpperCase()` convertin every letter on uppercase.\r\n * @method `asSentence()` convertin first letter of every sentence in uppercase.\r\n * @method `replaceTextEng()` if the text in Ru that convert every letter of sentence on Eng.\r\n * @method `render()` return child component.\r\n */\r\nexport class ButtonsContainer extends React.Component<IButtonContainer> {\r\n  /** `enterText` - text which need edit. */\r\n  textUpperCase = () => {\r\n    const enterText = this.props.enterText\r\n    if (enterText) {\r\n      const text = enterText.toUpperCase()\r\n      this.props.upperCase(text)\r\n    }\r\n  }\r\n\r\n  /** `enterText` - text which need edit. */ \r\n  textLowerCase = () => {\r\n    const enterText = this.props.enterText\r\n    if (enterText) {\r\n      const text = enterText.toLowerCase()\r\n      this.props.lowerCase(text)\r\n    }\r\n  }\r\n\r\n  /** `enterText` - text which need edit. */\r\n  firstTitle = () => {\r\n    const enterText = this.props.enterText\r\n    if (enterText) {\r\n      const text = enterText[0].toUpperCase() + enterText.slice(1) \r\n      this.props.firstTitle(text)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checked, if `enterText` is defined, then the first letter \r\n   * to uppercase and the rest to lowercase.\r\n   * \r\n   * `enterText` - text which need edit.\r\n   */\r\n  inverseRegister = () => {\r\n    const enterText = this.props.enterText\r\n    if (enterText) {\r\n      let text = ''\r\n      for (let i = 0; i < enterText.length; i++) {\r\n        enterText[i].toUpperCase() === enterText[i] \r\n          ? text += enterText[i].toLowerCase()\r\n          : text += enterText[i].toUpperCase()\r\n      }     \r\n      this.props.inverseRegister(text)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If `enterText` is defined, then the first letter converted to uppercase.\r\n   * \r\n   * `enterText` - text which need edit.\r\n   */\r\n  startAnUpperCase = () => {\r\n    const enterText = this.props.enterText\r\n    if (enterText) {\r\n      const text = enterText.replace(/(^|\\s)\\S/g, txt => txt.toUpperCase())\r\n      this.props.startAnUpperCase(text)\r\n    }\r\n  }\r\n\r\n  /** \r\n   * If `enterText` is defined, then the first letter converted to uppercase.\r\n   * \r\n   * `enterText` - text which need edit. \r\n   */\r\n  asSentence = () => {\r\n    const enterText = this.props.enterText\r\n    if (enterText) {\r\n      const text = enterText[0].toUpperCase() + (enterText.replace(/(^|[?!.;]\\s[\\p{Alpha}\\p{M}\\p{Nd}\\p{Pc}\\p{Join_C}])/gu, txt => txt.toUpperCase())).slice(1)\r\n      this.props.asSentence(text)\r\n    }\r\n  }\r\n\r\n  \r\n  /** \r\n   * Used for implement methods `replaceTextRu()` and `replaceTextEnd()` which return edited text.\r\n   * \r\n   * @param replacer object that contains values for replacing from letters of one language to letters of another.\r\n   * @param enterText text which need edit.\r\n   * @param replace value for saving register in `replace` text, which is a replaced text, and used in time checking the register.\r\n   * @returns `enterText`, it the text which was edited.\r\n   */\r\n  protected replace = (replacer: {[key: string]: string}, enterText: string, replace: string): string => {\r\n    for (let i = 0; i < enterText.length; i++) {                        \r\n      if( replacer[enterText[i].toLowerCase()] !== undefined ) {\r\n        if (enterText[i] === enterText[i].toLowerCase()) {\r\n          replace = replacer[enterText[i].toLowerCase()]    \r\n        } else if (enterText[i] === enterText[i].toUpperCase()) {\r\n          replace = replacer[enterText[i].toLowerCase()].toUpperCase();\r\n        }\r\n        enterText = enterText.replace(enterText[i], replace)        \r\n      }\r\n    }\r\n    return enterText\r\n  }\r\n\r\n  /**\r\n   * Does the same as in the method `replaceText()` but reversing places keys on algorithm:\r\n   * method Object.keys take a `replacer` and iterates over it, reverting object with\r\n   * invert key and value. \r\n   * Method which replaces Russian letters in English letters or rev.\r\n   * Implementing with help a method `replace()`.\r\n   * \r\n   * `enterText` - text which need edit.\r\n   * \r\n   * `replacer` - object that contains values for replacing from letters of one language to letters of another.\r\n   * \r\n   * `enterText` - variable which contains in yourself method `replace()`.\r\n   */\r\n  replaceText = () => {      \r\n    const enterText = this.props.enterText\r\n    const replacer: {[key: string]: string} = this.props.replacer\r\n\r\n    Object.keys(replacer).forEach((key: string): string => {\r\n      return replacer[replacer[key]] = key\r\n    })\r\n\r\n    const text = this.replace(replacer, enterText, '')\r\n    this.props.replaceText(text)\r\n  }\r\n  \r\n  /**\r\n   * Return Button presentatin component, which take in props methods and variables.\r\n   */\r\n  render() {\r\n    return (\r\n      <Buttons\r\n        textUpperCase={this.textUpperCase}\r\n        textLowerCase={this.textLowerCase}\r\n        firstTitle={this.firstTitle}\r\n        inverseRegister={this.inverseRegister}\r\n        startAnUpperCase={this.startAnUpperCase}\r\n        asSentence={this.asSentence}\r\n        replaceText={this.replaceText}\r\n      />\r\n    )\r\n  } \r\n}\r\n\r\n/**\r\n * Function, which takes data from state and gives to Button container component.\r\n * \r\n * @param state total state from which taking values `text` and `replacer`.\r\n * \r\n * `enterText` - entered text in which spaces at the edges are removed.\r\n * \r\n * `replacer` - object that contains values for replacing from letters of one language to letters of another.\r\n */\r\nconst mapStateToProps = (state: stateType) => ({\r\n  enterText: state.edit.enterText.trim(),\r\n  replacer: state.edit.replacer\r\n})\r\n\r\n/**\r\n * Function with which help can be change state.\r\n * \r\n * @param dispatch used for informing a store about changes.\r\n  * \r\n * It has callbacks for changing. \r\n */\r\nconst mapDispatchToProps = (dispatch: Dispatch<ActionsTypes>) => ({\r\n  upperCase: (text: string) => {\r\n    const action = upperCaseCreator(text)\r\n    dispatch(action)\r\n  },\r\n  lowerCase: (text: string) => {\r\n    const action = lowerCaseCreator(text)\r\n    dispatch(action)\r\n  },\r\n  firstTitle: (text: string) => {\r\n    const action = firstTitleCreator(text)\r\n    dispatch(action)\r\n  },\r\n  inverseRegister: (text: string) => {\r\n    const action = registerInversionCreator(text)\r\n    dispatch(action)\r\n  },\r\n  startAnUpperCase: (text: string) => {\r\n    const action = startAnUpperCaseCreator(text)\r\n    dispatch(action)\r\n  },\r\n  asSentence: (text: string) => {\r\n    const action = asSentenceCreator(text)\r\n    dispatch(action)\r\n  },\r\n  replaceText: (text: string) => {\r\n    const action = replaceTextCreator(text)\r\n    dispatch(action)\r\n  }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ButtonsContainer)","import React from 'react'\r\nimport style from '../../style/input.module.scss'\r\nimport CopyToClipboard from 'react-copy-to-clipboard'\r\nimport { IInput } from '../../interfaces/input_interface'\r\n\r\n/**\r\n * Input presentation component.\r\n * \r\n * @param copied boolean value, which becomes true if click on copyToClipboardButton button.\r\n * @param editedText text which was edit and comes to textarea.\r\n * @param enterText text which was entered.\r\n * @param copyToClipboard callback for copying to clipboard.\r\n * @param enteredText callback for sending every symbol from the textarea to redux store. \r\n * @param saveFileText callback for saving edited text in .txt file.\r\n * @returns tag main with nested tags.\r\n */\r\nexport const Input: React.FC<IInput> = ({copied, editedText, enterText, copyToClipboard, enteredText, saveFileText}) => (\r\n  <main id=\"main\" className={style.textarea}>\r\n    <label>\r\n      <textarea value={enterText || ''} onChange={enteredText} placeholder=\"Enter your text\"></textarea>\r\n    </label>\r\n    <div className={style.resultInput}>\r\n      <label>\r\n        <textarea value={editedText} readOnly placeholder=\"Your result\"></textarea>\r\n      </label>\r\n      <CopyToClipboard onCopy={copyToClipboard} text={editedText}>\r\n        {copied\r\n          ? <button aria-label=\"Copy to clipboard\" name=\"Copy to clipboard\" className={`clipboardSucc ${style.files}`}></button> \r\n          : <button aria-label=\"Copy to clipboard\" name=\"Copy to clipboard\" className={`clipboard ${style.files}`}></button>\r\n        }\r\n      </CopyToClipboard>\r\n      <button aria-label=\"Download edited text\" className={`download ${style.saver}`} onClick={saveFileText}></button>\r\n    </div>\r\n  </main>\r\n)\r\n","import React from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport { Input } from \"./Input\"\r\nimport { saveAs } from 'file-saver'\r\nimport { enterTextCreator, copyToClipboardCreator } from \"../../state/edit-text-reducer\"\r\nimport { IInputContainer } from '../../interfaces/input_interface'\r\nimport { Dispatch } from 'redux'\r\nimport { ActionsTypes } from '../../types/edit_types'\r\nimport { stateType } from '../../types/state_type'\r\n\r\n/**\r\n * The component that is responsible for the buttons.\r\n * \r\n * @method `saveFileText()` saving edited text in txt format.\r\n * @method `enteredText()` send every symbol from the text area to a redux store.\r\n * @method `render()` return child component.\r\n */\r\nexport class InputContainer extends React.Component<IInputContainer> {\r\n  /**\r\n   * `blob` - variable, which contains an instance of the class `Blob` from the file-saver library, which \r\n   * using for downloading .txt file with edited text. Takes 2 params: text, which contains in textarea\r\n   * and type of text.\r\n   * \r\n   * `saveAs` - function, which comes from a file-saver library and saves the file. In params takes a text \r\n   * from textarea, and a Name of the file.\r\n   */\r\n  saveFileText = () => {\r\n    const blob = new Blob([this.props.editedText], {type: \"text/plain; charset=utf-8\"})\r\n    saveAs(blob, Math.random().toString(36).substring(1) + '.txt')\r\n  }\r\n\r\n  /**\r\n   * Sending every symbol from the textarea to redux store. \r\n   * \r\n   * @param event the event from Input presentation component.\r\n   * \r\n   * `text` - all text which enter in textarea.\r\n   */\r\n  enteredText = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    let text = event.target.value\r\n    this.props.enteredText(text)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Input\r\n        copied={this.props.copied}\r\n        editedText={this.props.editedText}\r\n        enterText={this.props.enterText}\r\n        copyToClipboard={this.props.copyToClipboard}\r\n        enteredText={this.enteredText}\r\n        saveFileText={this.saveFileText}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Function, which takes data from state and gives to Input container component.\r\n * \r\n * @param state total state from which taking values `enterText`, `text` and `copied`.\r\n *  \r\n * `enterText` - text which was be entered.\r\n * \r\n * `editedText` - text, which was being edited and come from the state to the textarea.\r\n * \r\n * `copied` - parameter, which changing if click on copyToClipboard button.\r\n */\r\nconst mapStateToProps = (state: stateType) => ({\r\n  enterText: state.edit.enterText,\r\n  editedText: state.edit.editedText,\r\n  copied: state.edit.copied\r\n})\r\n\r\n/**\r\n * Function with which help can be change state.\r\n * \r\n * @param dispatch used for informing a store about changes.\r\n *\r\n * It has callbacks for changing.\r\n */\r\nconst mapDispatchToProps = (dispatch: Dispatch<ActionsTypes>) => ({\r\n  enteredText: (text: string) => {\r\n    let action = enterTextCreator(text)\r\n    dispatch(action)\r\n  },\r\n  copyToClipboard: () => {\r\n    dispatch(copyToClipboardCreator(true))\r\n    \r\n    setTimeout(() => {\r\n      dispatch(copyToClipboardCreator(false))\r\n    }, 2000)\r\n  }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputContainer)","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport style from '../../style/header.module.scss'\r\nimport logo from '../../public/logo.svg'\r\nimport { ILogo } from '../../interfaces/header_interface'\r\n\r\n/**\r\n * @param logotext text of logo.\r\n * @returns div with nested NavLink tags. One of them takes `logotext`.\r\n */\r\nexport const Logo: React.FC<ILogo> = ({logotext}) => (\r\n  <div className={style.logo}>\r\n    <NavLink className={style.img} to=\"./\"><img src={logo} alt=\"logo the app\"/></NavLink>\r\n    <NavLink className={style.txt} to=\"./\"><span>{logotext}</span></NavLink>\r\n  </div>\r\n)","import React from 'react'\r\nimport { Logo } from './Logo'\r\nimport style from '../../style/header.module.scss'\r\nimport { IHeader } from '../../interfaces/header_interface'\r\n\r\n/**\r\n * Header presentation component in which nested another presentation component(Logo).\r\n * \r\n * @param logotext text of the logo.\r\n * @param toggleTheme callback for swithing theme.\r\n * @returns tag header with nested a and button tags and Logo presentation component.\r\n */\r\nexport const Header: React.FC<IHeader> = ({logotext, toggleTheme}) => (\r\n  <header className={style.header}>\r\n    <a className=\"skip-link\" href=\"#main\">Skip to main</a>\r\n    <Logo logotext={logotext} />\r\n    <button aria-label=\"Switch theme\" className=\"theme\" onClick={toggleTheme}></button>\r\n  </header>\r\n)","import React from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { Header } from \"./Header\"\r\nimport { IHeaderContainer } from \"../../interfaces/header_interface\"\r\nimport { stateType } from \"../../types/state_type\"\r\n\r\n/**\r\n * @method `render()` return child component.\r\n */\r\nexport class HeaderContainer extends React.Component<IHeaderContainer> {\r\n  /**\r\n   * Return Header presentatin component, which take in props methods and variables.\r\n   */\r\n  render() {\r\n    return(\r\n      <Header\r\n        toggleTheme={this.props.toggleTheme}\r\n        logotext={this.props.logotext}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Function, which takes data from state and gives to Header container component.\r\n * \r\n * @param state total state from which taking values `logotext` and `mode`.\r\n * \r\n * `logotext` - it's the text of the logo.\r\n * \r\n * `mode` - it value the theme mode, which can be switching.\r\n */\r\nconst mapStateToProps = (state: stateType) => ({\r\n  logotext: state.logo.logotext,\r\n  mode: state.theme.mode\r\n})\r\n\r\nexport default connect(mapStateToProps)(HeaderContainer)","//\r\n//File with a dunamic settings for the theme.\r\n//\r\n\r\nimport sun from './public/mode_light.svg'\r\nimport moon from './public/mode_dark.svg'\r\nimport clipboard from './public/clipboard_light.svg'\r\nimport clipboardDark from './public/clipboard_dark.svg'\r\nimport clipboardSucc from './public/success_light.svg'\r\nimport clipboardSuccDark from './public/success_dark.svg'\r\nimport download from './public/direct-download_light.svg'\r\nimport downloadDark from './public/direct_download_dark.svg'\r\n\r\n/**\r\n * Variables, which responsible for colours.\r\n */\r\nconst white = '#fff'\r\nconst smoke = '#ccc'\r\nconst gray = '#ddd'\r\nconst darkBody = '#363537'\r\nconst darkArea = '#1f2023'\r\nconst black = '#000'\r\nconst purple = '#a0a4d9'\r\nconst hovPurple = '#6c73d4'\r\n\r\n/**\r\n * Dynamic settings of a light theme.\r\n */\r\nexport const lightTheme = {\r\n  body: white,\r\n  text: black,\r\n  textArea: gray,\r\n  button: gray,\r\n  buttonTxt: black,\r\n  themeBtn: moon,\r\n  downloadBtn: download,\r\n  clipboard: clipboard,\r\n  clipboardSucc: clipboardSucc,\r\n  buttonHover: smoke\r\n}\r\n\r\n/**\r\n * Dynamic settings of a dark theme.\r\n */\r\nexport const darkTheme = {\r\n  body: darkBody,\r\n  text: smoke,\r\n  textArea: darkArea,\r\n  button: purple,\r\n  buttonTxt: black,\r\n  themeBtn: sun,\r\n  downloadBtn: downloadDark,\r\n  clipboard: clipboardDark,\r\n  clipboardSucc: clipboardSuccDark,\r\n  buttonHover: hovPurple\r\n}","import { createGlobalStyle } from 'styled-components';\r\n\r\n/**\r\n * Global styles that apply to the entire application.\r\n * @param theme take from theme.ts\r\n */\r\nexport const GlobalStyles = createGlobalStyle<any>`\r\n  *,\r\n  *::after,\r\n  *::before{\r\n    box-sizing: border-box;\r\n  }\r\n  body{\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\r\n    transition: all 0.25s linear;\r\n  }\r\n  .button button{\r\n    border: none;\r\n    background: ${({ theme }) => theme.button};\r\n    color: ${({ theme }) => theme.buttonTxt};\r\n  }\r\n  .button button:hover{\r\n    background: ${({ theme }) => theme.buttonHover};\r\n  }\r\n  .button button:focus{\r\n    background: ${({ theme }) => theme.buttonHover};\r\n  }\r\n  textarea{\r\n    border: none;\r\n    background: ${({ theme }) => theme.textArea};\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n  textarea::placeholder{\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n  a{\r\n    text-decoration: none;\r\n    color: ${({ theme }) => theme.text};\r\n  }\r\n  .theme{\r\n    border: none;\r\n    background: url(${({ theme }) => theme.themeBtn});\r\n  }\r\n  .clipboard{\r\n    background: url(${({ theme }) => theme.clipboard}) no-repeat center top/cover;\r\n  }\r\n  .clipboardSucc{\r\n    background: url(${({ theme }) => theme.clipboardSucc}) no-repeat center top/cover;\r\n  }\r\n  .download{\r\n    background: url(${({ theme }) => theme.downloadBtn}) no-repeat center top/cover;\r\n  }\r\n  .skip-link {\r\n    position: absolute;\r\n    top: -40px;\r\n    left: 0;\r\n    background: #000000;\r\n    color: white;\r\n    padding: 8px;\r\n    z-index: 100;\r\n  }\r\n  \r\n  .skip-link:focus {\r\n    top: 0;\r\n  }\r\n`;\r\n","import React from 'react'\r\nimport style from '../../style/footer.module.scss'\r\n\r\n/**\r\n * This function just returning the footer component.\r\n * @returns tag footer with a nested span tag\r\n */\r\nexport const Footer: React.FC = () => (\r\n  <footer className={style.footer}>\r\n    <span>©Textshifter 2020</span>\r\n  </footer>\r\n)","import React, { useState } from 'react'\r\nimport Buttons from './components/buttons/Buttons-Container'\r\nimport Input from './components/input/InputContainer'\r\nimport HeaderContainer from './components/header/Header-Container'\r\nimport './style/index.scss'\r\nimport { lightTheme, darkTheme } from './theme'\r\nimport { GlobalStyles } from './global_style'\r\nimport { ThemeProvider } from 'styled-components'\r\nimport { Footer } from './components/footer/Footer'\r\nimport { IApp } from './interfaces/app_interface'\r\n\r\n/**\r\n * App presentation component. In here using a hook useState for switching theme mode.\r\n * \r\n * @param mode it a theme mode(dark or light).\r\n * @param switchTheme a callback with which help to can switch the theme.\r\n * @returns all components in application.\r\n */\r\nexport const App: React.FC<IApp> = ({mode, switchTheme}) => {\r\n\r\n  /**\r\n   * Hook useState.\r\n   * \r\n   * `theme` - it mode of theme which was set.\r\n   * \r\n   * `setTheme` - function with which help to can switch mode.\r\n   */\r\n  const [theme, setTheme] = useState(mode)\r\n\r\n  const toggleTheme = () => {\r\n    theme === 'light' ? setTheme('dark') : setTheme('light')\r\n    switchTheme()\r\n  }\r\n  \r\n  return (\r\n    <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\r\n      <>\r\n        <GlobalStyles />\r\n          <div className=\"container\">\r\n            <HeaderContainer toggleTheme={toggleTheme} />\r\n            <Input />\r\n            <Buttons />\r\n          </div>\r\n          <Footer />\r\n        </>\r\n    </ThemeProvider>\r\n  )\r\n}","import React from 'react'\r\nimport './style/index.scss'\r\nimport { switchThemeCreator } from './state/switch-theme-reducer'\r\nimport { connect } from 'react-redux'\r\nimport { App } from './App'\r\nimport { IAppContainer } from './interfaces/app_interface'\r\n\r\n/**\r\n * The component that is responsible for the buttons.\r\n * \r\n * @method `componentDidUpdate()` method for update component.\r\n * @method `switchTheme()` method for switch theme.\r\n * @method `render()` return child component.\r\n */\r\nclass AppContainer extends React.Component<IAppContainer> {\r\n  /**\r\n   * A method, which following the mode of theme, and if mode changed then \r\n   * set it in localstorage.\r\n   */\r\n  componentDidUpdate() {\r\n    localStorage.setItem('mode', this.props.mode)\r\n  }\r\n\r\n  /**\r\n   * Method for switching theme.\r\n   * \r\n   * `mode` - the value of theme mode(dark or light).\r\n   */\r\n  switchTheme = () => {\r\n    let mode = this.props.mode\r\n    mode === 'light' ? mode = 'dark' : mode = 'light'\r\n    this.props.switchTheme(mode)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <App\r\n        mode={this.props.mode}\r\n        switchTheme={this.switchTheme} \r\n      />\r\n    )\r\n  }\r\n}\r\n\r\n/**\r\n * Function, which takes data from state and gives to App container component.\r\n * \r\n * @param state total state from which taking values `mode`.\r\n *  \r\n * `mode` - the value of theme mode(dark or light).\r\n */\r\nconst mapStateToProps = (state: any) => ({\r\n  mode: state.theme.mode\r\n})\r\n\r\n/**\r\n * Function with which help can be change state.\r\n * \r\n * @param dispatch used for informing a store about changes.\r\n *\r\n * It has callbacks for changing.\r\n */\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  switchTheme: (mode: string) => {\r\n    dispatch(switchThemeCreator(mode))\r\n  }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppContainer)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {switchRegisterType, ActionsTypes } from '../types/logo_types'\r\nimport { SWITCH_REGISTER } from './types'\r\n\r\n/**\r\n * Starting state of the `logoReducer`.\r\n * \r\n * `logotext` - the text of the logo.\r\n */\r\nconst initialState = {\r\n  logotext: 'Textshifter' as string\r\n}\r\n\r\n/**\r\n * Returns `logoInitialTypes` which is a type of data in the `logoReducer`.\r\n */\r\nexport type logoInitialTypes = typeof initialState\r\n\r\n/**\r\n * `logoReducer` which if missing type returns the state.\r\n * \r\n * `SWITCH_REGISTER` - used for switching register of logo text.\r\n * \r\n */\r\nexport const logoReducer = (state = initialState, action: ActionsTypes): logoInitialTypes => {\r\n  switch (action.type) {\r\n    case SWITCH_REGISTER: {\r\n      return {\r\n        ...state,\r\n        logotext: action.logotext\r\n      }\r\n    }\r\n    default: \r\n      return state\r\n  }\r\n}\r\n\r\n/**\r\n * Action creator for `SWITCH_REGISTER` type.\r\n * \r\n * @param logotext the value which contains the was entered text.\r\n * \r\n * `type` - the type by which the desiring value is found to change.\r\n * \r\n * `logotext` - a value in which contains the text of the logo.\r\n */\r\nexport const switchRegisterCreator = (logotext: string): switchRegisterType => ({type: SWITCH_REGISTER, logotext})","import thunk from 'redux-thunk';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { editTextReducer } from './edit-text-reducer'\r\nimport { switchThemeReducer } from './switch-theme-reducer'\r\nimport { logoReducer } from './logo-reducer'\r\n\r\n/**\r\n * `redusers` - variable, in which combining all reducers from files:\r\n * switch-theme-redcer.ts, logo-reducer.ts and edit-text-reducer.ts.\r\n */\r\nexport const redusers = combineReducers({\r\n  edit: editTextReducer,\r\n  theme: switchThemeReducer,\r\n  logo: logoReducer\r\n})\r\n\r\n/**\r\n * `store` - it global store of application. It turns out from `reducers` \r\n * and with help method `createStore`. Method `createStore` also have `applyMiddleware`\r\n * the middleware. Example - thunks.\r\n */\r\nexport const store = createStore(redusers, composeWithDevTools(\r\n  applyMiddleware(thunk)\r\n))","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App-Container'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport { store } from './state/store'\nimport 'normalize.css'\n\n/**\n * Parent component, from which start rendering application. To Provider\n * transmitted global store. In a container BrowserRouter transmitted basename, \n * which needs for working on hosing.\n */\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.register()\n"],"sourceRoot":""}